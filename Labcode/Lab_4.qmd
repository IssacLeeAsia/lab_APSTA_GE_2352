---
title: "Lab 4"
author: "Martin"
date: 09/29/2023
date-format: iso
format: 
  revealjs:
    reference-location: document
editor: visual
---

```{r}
#| include: false
#| 
library(tidyverse)
library(foreach)
library(iterators)
library(doParallel)
cl <- makeCluster(6)
registerDoParallel(cl)
data(airquality)
# use `cars` as an example
cars_1 <- cars
```

## Content

-   Lab

## Before we start

- Attendance: Scan the QR code
  - Attendance code: **dens1ty**
![Attendance](images/frame.png){.absolute bottom="0" right="70" width="300" height="300"}

# Lab

## Density Plot {.scrollable}

::: incremental
Intuitively, the density plot looks like we connect the midpoint at the top of each bar.
:::

::: fragment
```{r}
#| echo: true
set.seed(42L)
x <- rnorm(500)
# create a histogram
hist_p_1 <- hist(x, freq = F, 
                 col = "white", 
                 main = NULL, 
                 breaks = 20L)
# connect every midpoint 
with(hist_p_1, lines(mids, density, col = "red"))
# compare with the density line
lines(density(x), col = "blue")
```
:::

## Bandwidth {.scrollable}

::: panel-tabset
### Different bandwidth

::: incremental
- The smaller bandwidth, the more squiggly the density plot looks (undersmooth)
- Large bandwidth may result in oversmooth.
- We want something between.
:::

::: fragment
```{r}
#| echo: false
# Generate data
set.seed(2021)
x <- rbinom(100,101,p=.7)
# plot
par(mfrow = c(2, 2))
plot(density(x, bw = 30), lwd = 2,
     col = "red", main = "Big bandwidth (oversmooth)")
plot(density(x, bw = 0.1), lwd = 2,
     col = "red", main = "Small bandwidth (undersmooth)")
plot(density(x, bw = 1), lwd = 2,
     col = "red", main = "Medium bandwidth (good)")
plot(density(x), lwd = 2,
     col = "red", main = "Default bandwidth (good)")
```
:::

### Mathematical foundation

$$
\hat{f}(x;h)=\frac{1}{n h} \sum_{i=1}^n K\left(\frac{x-x_i}{h}\right)
$$

- Kernel density function
  - Given a set of independent and identically distributed samples $x = {x_1, x_2, \cdots, x_n}$, the KDE process can be formulated as below.
  - Essentially, for a specific location of $\hat{f}$, the kernel $K$ is assigning a weight for any $x_i$ regarding their distance to $x$.
  - $K$ is the kernel function that satisfies $\int_{-\infty}^{\infty} K(t)dt = 1$. $H$ is a bandwidth parameter, controlling that distance.
    - [Reference](https://billc.io/2023/01/kde-from-scratch/)
    - [Interesting interactive website](https://mathisonian.github.io/kde/)


:::

# Boxcar density

## Simpler example {.scrollable}

::: incremental
- Rough estimation of density
  - $n$: nubmer of grid points; here we set $n = 10$
  - frac: the fraction of available data on either side of evaluation point. It determines the total width of the boxcar.
    - $frac = \frac{2}{9}$, the total width is 2, 1 on each side.
- We move the boxcar to each evaluation points to see how many data points inside the boxcar
:::

## Generate data {.scrollable}

::: fragment
```{r}
#| echo: true
set.seed(42)
vec <- sample(1:10, size = 50, replace = T)
# evaluation points
n <- 10; (eval_points <- seq(min(vec), max(vec), length = n))
# either side's width of a boxcar
frac <- 2/9; (half_width <- (diff(range(vec))*(2/9))/2)
# ten "boxcars"
(boxcars <- (sapply(eval_points, function(x) c(x-half_width, x+half_width))))
```
:::

::: fragment
```{r}
bar_vec <- barplot(table(vec), ylim= c(0,10), col = "white")
#,col = c("white", "red")[(1:10 %in% 1:2)+1]
text(bar_vec, table(vec) + 0.2, labels = table(vec), pos = 3)
```
:::

```{r}
#| include: false
plot(1, type = "n", xlab = "",
     ylab = "", xlim = c(0, 12), 
     ylim = c(3, 16))
p <- recordPlot()
```


## First evaluation point

- $x = 1$, total range $[0,2]$
- number of datapoints: $5+7=12$

::: fragment
```{r}
#| echo: false
par(mfrow = c(1, 2))
bar_vec <- barplot(table(vec), ylim= c(0,10), 
                   col = c("white", "red")[(1:10 %in% boxcars[1,1]:boxcars[2,1])+1])
text(bar_vec, table(vec) + 0.2, labels = table(vec), pos = 3)
# The first point is
plot(1, type = "n", xlab = "",
     ylab = "", xlim = c(0, 12), 
     ylim = c(8, 20))
points(eval_points[1], sum(table(vec)[0:2]), pch = 20)
```
:::

## Second evaluation point

- $x = 2$, total range $[1,3]$
- number of datapoints: $5+7=12$

::: fragment
```{r}
#| echo: false
par(mfrow = c(1, 2))
bar_vec <- barplot(table(vec), ylim= c(0,10), 
                   col = c("white", "red")[(1:10 %in% boxcars[1,2]:boxcars[2,2])+1])
text(bar_vec, table(vec) + 0.2, labels = table(vec), pos = 3)
# The first point is
plot(1, type = "n", xlab = "",
     ylab = "", xlim = c(0, 12), 
     ylim = c(8, 20))
points(eval_points[1], sum(table(vec)[0:2]), pch = 20)
points(eval_points[2], sum(table(vec)[1:3]), pch = 20)
```
:::

## Final scatter plot


::: fragment
```{r}
#| echo: false
par(mfrow = c(1, 2))
bar_vec <- barplot(table(vec), ylim= c(0,10), col = "white")
text(bar_vec, table(vec) + 0.2, labels = table(vec), pos = 3)
# The first point is
plot(1, type = "n", xlab = "",
     ylab = "", xlim = c(0, 12), 
     ylim = c(8, 20))
for (i in eval_points){
  points(eval_points[i], sum(table(vec)[(i-half_width):(i+half_width)]), pch = 20)
}

```
:::

## Finally...

-   Good luck!
    -   Lab Materials: ![lab_slides](images/github.png){.absolute bottom="0" right="70" width="500" height="500"}
